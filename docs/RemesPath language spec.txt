This is the pseudo-Backus-Naur grammar of RemesPath as of JsonTools 5.9.
In the future it will likely change with the addition of things like user-defined functions.
==========================
QUERY := QUERY SEMICOLON STATEMENT |
    STATEMENT
SEMICOLON := WHITESPACE ";" WHITESPACE
STATEMENT := EXPR_FUNC
    | ASSIGNMENT_EXPR
    | VAR_ASSIGN
    | LOOP
LOOP := LOOP_VAR_ASSIGN SEMICOLON QUERY SEMICOLON LOOP_END
    | LOOP_VAR_ASSIGN SEMICOLON QUERY
    | LOOP_VAR_ASSIGN
ASSIGNMENT_EXPR := ASSIGNMENT_EXPR_LHS EQUALS_SIGN EXPR_FUNC
ASSIGNMENT_EXPR_LHS := EXPR_FUNC (except UNQUOTED_STR)
VAR_ASSIGN := WHITESPACE NON_LOOP_VAR_KEYWORD WHITESPACE NON_KEYWORD_UQS EQUALS_SIGN EXPR_FUNC
LOOP_VAR_ASSIGN := WHITESPACE LOOP_VAR_KEYWORD WHITESPACE NON_KEYWORD_UQS EQUALS_SIGN EXPR_FUNC
LOOP_END := LOOP_END_KEYWORD LOOP_VAR_KEYWORD
NON_LOOP_VAR_KEYWORD  := "var"
LOOP_VAR_KEYWORD := "for"
LOOP_END_KEYWORD := "end"
NON_KEYWORD_UQS := UNQUOTED_STR (except KEYWORDS)
EQUALS_SIGN := WHITESPACE "=" WHITESPACE
EXPR_FUNC := OPEN_PAREN EXPR_FUNC CLOSE_PAREN
    | EXPR_FUNC BINOP EXPR_FUNC
    | UNARY_OP EXPR_FUNC
    | EXPR
EXPR := WHITESPACE (ARG_FUNC
    | CUR_JSON 
    | JSON_LITERAL
    | F_STRING
    | SCALAR
    | EXPR INDEXER) WHITESPACE
ARG_FUNC := UNQUOTED_STR OPEN_PAREN ARGS? CLOSE_PAREN
ARGS := NON_FINAL_ARGS COMMA FINAL_ARG
    | FINAL_ARG
FINAL_ARG := (STAR? EXPR_FUNC)?
NON_FINAL_ARGS := NON_FINAL_ARGS COMMA EXPR_FUNC
    | EXPR_FUNC?
COMMA := WHITESPACE "," WHITESPACE
CUR_JSON := "@"
JSON_LITERAL := "j" QUOTED_STR
REGEX := "g" QUOTED_STR
F_STRING := "f`" F_STRING_INTERNALS "`"
F_STRING_INTERNALS := "}}"
    | "{{"
    | F_STRING_INTERPOLATED_SECTION
    | NON_CURLYBRACE_TEXT
NON_CURLYBRACE_TEXT := NON_CURLYBRACE_CHAR NON_CURLYBRACE_TEXT
    | NON_CURLYBRACE_CHAR?
NON_CURLYBRACE_CHAR := (any Unicode character except "{" or "}")
F_STRING_INTERPOLATED_SECTION := F_STRING_INTERPOLATED_TOKEN WHITESPACE F_STRING_INTERPOLATED_SECTION
    | F_STRING_INTERPOLATED_TOKEN
F_STRING_INTERPOLATED_TOKEN := EXPR_FUNC (but cannot contain any "`" or "{" or "}")
SLICER := INTEGER? COLON INTEGER? (COLON INTEGER?)?
SCALAR := STR | NUMBER | BOOL | REGEX | NULL
STR := QUOTED_STR | UNQUOTED_STR
NUMBER := INTEGER | FLOAT
INTEGER := HEX_INT | DEC_INT
NEG = "-"
PLUS := "+"
PLUS_MINUS := PLUS | NEG
HEX_INT := "0x" HEX_DIGITS
HEX_DIGITS := HEX_DIGIT HEX_DIGITS
    | HEX_DIGIT
HEX_DIGIT := A-F | a-f | DIGIT
NONZERO_DIGIT := "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
DIGIT := "0" | NONZERO_DIGIT
DEC_INT := NONZERO_DIGIT DIGITS
    | NONZERO_DIGIT
DIGITS := DIGITS DIGIT | DIGIT
FLOAT := DOT_PART EXP_PART? | KEYWORD_FLOAT
KEYWORD_FLOAT := NAN | INF
NAN := "NaN"
INF := "Infinity"
DOT_PART := DEC_INT
    | DEC_INT DOT
    | DEC_INT DOT DEC_INT
    | DOT DEC_INT
EXP_PART := ("E" | "e") PLUS_MINUS? DEC_INT
BOOL := "true" | "false"
NULL := "null"
UNQUOTED_STR := (see JSON5 spec for unquoted object keys)
QUOTED_STR := BACKTICK QUOTED_STR_CONTENTS BACKTICK
QUOTED_STR_CONTENTS := QUOTED_STR_CHAR QUOTED_STR_CONTENTS
    | QUOTED_STR_CHAR?
QUOTED_STR_CHAR := BACKSLASH_ESCAPE
    | UNESCAPED_UNICODE
UNESCAPED_UNICODE := UNICODE (excluding ESCAPED_CHAR)
UNICODE := (any Unicode character)
BACKSLASH_ESCAPE := BACKSLASH ESCAPED_CHAR
ESCAPED_CHAR := BACKSLASH | BACKTICK | DOUBLEQUOTE
BACKSLASH := "\"
BACKTICK := "`"
WHITESPACE := WHITESPACE_CHAR WHITESPACE | WHITESPACE_CHAR?
WHITESPACE_CHAR := "\x20" | "\t" | "\r" | "\n"
OPEN_PAREN := WHITESPACE "(" WHITESPACE
CLOSE_PAREN := WHITESPACE ")" WHITESPACE
OPEN_CURLYBRACE := WHITESPACE "{" WHITESPACE
CLOSE_CURLYBRACE := WHITESPACE "}" WHITESPACE
OPEN_SQUAREBRACE := WHITESPACE "[" WHITESPACE
CLOSE_SQUAREBRACE := WHITESPACE "]" WHITESPACE
INDEXER := BOOLEAN_INDEXER
    | DOT_INDEXER
    | VARNAME_LIST
    | SLICER_LIST
    | PROJECTION
    | NEGATED_INDEXER
BOOLEAN_INDEXER := OPEN_SQUAREBRACE EXPR_FUNC CLOSE_SQUAREBRACE
DOT_INDEXER := WHITESPACE DOTS WHITESPACE DOT_INDEXER_ITEM WHITESPACE
DOT := "."
DOUBLEDOT := ".."
DOTS := DOT | DOUBLEDOT
DOT_INDEXER_ITEM := STAR | STR | REGEX
STAR := "*"
VARNAME_LIST := DOUBLEDOT? OPEN_SQUAREBRACE VARNAMES CLOSE_SQUAREBRACE
VARNAMES := VARNAME COMMA VARNAMES | VARNAME
VARNAME := STR | REGEX
SLICER_LIST := OPEN_SQUAREBRACE SLICER_INTS CLOSE_SQUAREBRACE
SLICER_INTS := SLICER_INT SLICER_INTS | SLICER_INT
SLICER_INT := INTEGER | SLICER
PROJECTION := ARRAY_PROJECTION
    | OBJECT_PROJECTION
    | MAP_PROJECTION
ARRAY_PROJECTION := OPEN_CURLYBRACE ARGS? CLOSE_CURLYBRACE
OBJECT_PROJECTION := OPEN_CURLYBRACE KEY_VALUE_PAIRS CLOSE_CURLYBRACE
KEY_VALUE_PAIRS := KEY_VALUE COMMA KEY_VALUE_PAIRS | KEY_VALUE
KEY_VALUE := STR COLON EXPR_FUNC
COLON := WHITESPACE ":" WHITESPACE
MAP_PROJECTION := FORWARD_ARROW EXPR_FUNC
FORWARD_ARROW := WHITESPACE "->" WHITESPACE
NEGATED_INDEXER := NEGATED_VARNAME_LIST | NEGATED_SLICER_LIST
NEGATED_VARNAME_LIST := BANG OPEN_SQUAREBRACE VARNAMES CLOSE_SQUAREBRACE
    | BANG WHITESPACE DOT WHITESPACE VARNAME WHITESPACE
NEGATED_SLICER_LIST := BANG SLICER_LIST
BANG := WHITESPACE "!" WHITESPACE
BINOP := STAR | NEG | PLUS | "/" | "//" | "**" | "==" | "!=" | "=~" | "<=" | ">=" | "<" | ">" | "&" | "|" | "%" | "^"
UNARY_OP := NOT | NEG | PLUS
NOT := "not"
NEG := "-"
PLUS := "+"
DOUBLEQUOTE := '"'
KEYWORDS := KEYWORD_FLOAT | NOT | BOOL | NULL | VAR_KEYWORD | LOOP_END_KEYWORD
VAR_KEYWORD := NON_LOOP_VAR_KEYWORD | LOOP_VAR_KEYWORD